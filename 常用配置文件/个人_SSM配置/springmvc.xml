<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/security          
    	http://www.springframework.org/schema/security/spring-security.xsd">
        
	<!-- 1.开启注解扫描controller 到IOC -->
	<context:component-scan base-package="wxt">
		<!-- 只扫描controller注解 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 2.配置视图解析器 -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/"></property>     <!-- 固定写法：/XX/XX/格式 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 3.过滤静态资源 -->
	<mvc:resources location="/css/" mapping="/css/**"></mvc:resources>
	<mvc:resources location="/js/" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/image/" mapping="/image/**"></mvc:resources>
	
	<!-- 4.开启注解mvc支持 -->
	<mvc:annotation-driven />
<!--<mvc:annotation-driven conversion-service="conversionService"/>     加载自定义类型转换器 -->
    
    
    <!--   其他需求    -->
    
    
    <!-- 5.注册自定义类型转换器，原本转换器中，添加自定义类型转换器 -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="cn.itcast.utils.StringToDateConverter"/>		<!-- 添加自定义转换器 -->
            </set>
        </property>
    </bean>
    
    
    <!-- 6.配置文件上传解析器 -->  <!-- id、class 的值是固定的-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为 5MB -->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>
    
    
    <!-- 7.配置拦截器 --> 
    <mvc:interceptors>
        <mvc:interceptor>			<!-- 配置一个拦截器 --> 
             <mvc:mapping path="/**"/>	    <!-- path="/**" --全部方法都拦截	path="/user/*" --/user访问目录下的方法都拦截 -->
             <bean class="wxt.interceptor.MyInterceptor"></bean> 	<!-- 配置拦截器对象 --> 
        </mvc:interceptor>
    </mvc:interceptors>
    
    <!-- 8.开启 方法级权限控制注解 	
            三种注解：JSR-250注解、@Secured注解、支持表达式的注解
    		
            若 权限注解 写在 Controller中，将这条配置移到 spring-mvc.xml中，且需要 spring-mvc.xml引入 security约束，
    		否则 权限注解 无效-->
    <security:global-method-security jsr250-annotations="enabled" secured-annotations="enabled" pre-post-annotations="enabled"></security:global-method-security>
   
    <!-- 9.对Controller层进行AOP增强
            通知spring使用cglib而不是jdk的来生成代理方法 AOP      可以拦截到Controller -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>