package springMVC;

/*								1.SpringMVC 的基本概念
	1.三层架构
		1.于B/S 架构(浏览器/服务器)的开发中，系统标准的三层架构为：表现层、业务层、持久层。
		
		表现层：	1.即 web层。它负责接收客户端请求，向客户端响应结果。
				2.表现层包括控制层和展示层：控制层负责接收请求，展示层负责结果的展示。
				3.表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理。
				4.表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）
		业务层：	1.即 service 层。它负责业务逻辑处理，和开发项目的需求相关。
				2.业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（事务应该放到业务层来控制）
		持久层：	1.即 dao 层。负责数据持久化，包括数据层(即数据库)和数据访问层，
				2.数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口.
				
			表现层(web层)			业务层(service层)			持久层(dao层)
			   JSP		--V				Service						Dao
			  Servlet	--C				JavaBean	--M


	2. MVC模型
		1. MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种用于设计创建 Web应用程
		序 表现层的模式。
		
		Model (模型)：数据模型。一般情况下用于封装数据。即 JavaBean
		View (视图)：一般用于展示数据。即 JSP/HTML
		Controller (控制器)：一般用于处理程序逻辑。即 servlet


	3. SpringMVC概述
	
		1.SpringMVC 是什么?
			1. SpringMVC 是一种基于 Java的实现 MVC设计模型的请求驱动类型的轻量级 Web框架，属于 Spring FrameWork的后续产品。
			2. 它通过一套注解，让一个简单的 Java类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful编程风格的请求。
	
	
		2.SpringMVC 和 Struts2 的优略分析
			共同点：
				1.它们都是表现层框架，都是基于 MVC 模型编写的。
				2.它们的底层都离不开原始 ServletAPI。
				3.它们处理请求的机制都是一个核心控制器。
				
			区别：
				1.Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter。
				2.Spring MVC 是基于方法设计的，而 Struts2是基于类，Struts2每次执行都会创建一个动作类。所以 Spring MVC会比 Struts2快些。
				3.Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便。
				 (JSR303 是一套 JavaBean参数校验的标准,它定义了很多常用的校验注解,直接将这些注解加在 JavaBean的属性上,就可在需要校验时
				    进行校验了。)
				4.Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL提升，尤其是 struts2 的表单标
				签，远没有 html 执行效率高。


 */


/*								 SpringMVC 入门案例		(--见: Web20_SpringMVC_Day1)
 * 
 	效果：
 		主页：localhost:8080/Web20_SpringMVC	(实际加载index.jsp)
 		点击超链接，控制台输出"Hello World,Hello SpringMVC"，并跳转到/WEB-INF/pages/下的success.jsp
 
 
 
		(三个要点：	核心控制器	--	web.xml <servlet>配置，		并读取springmvc.xml)
					视图解析器	--	springmvc.xml <bean>配置，	加到 IOC容器
				   controller类	--	注解配置类，配置方法			加到 IOC容器

	1. SpringMVC 入门案例
			0.创建 maven工程 web项目。
			
			1.在/webapp 目录下，创建 index.jsp:
				1.创建超链接,指向: hello 	(指向 @RequestMapping(path="/hello") 映射的方法)
					<a href="hello">入门程序</a>
			
			2.导包：		1.spring-context:		spring IOC容器 
						2.aspectjweaver:		spring AOP
						3.spring-web:								--springMVC	jar
						4.spring-webmvc:							--springMVC	jar
						5.servlet-api:			servlet API
						6.jsp-api:				JSP API
						
			3.配置前端(核心)控制器：		--一个 Servlet（springMVC 必备）
				1.在web.xml中配置.
				2.在<web-app>中配置<servlet>标签、<servlet-mapping>标签:			
					<servlet-class>:  org.springframework.web.servlet.DispatcherServlet (spring-webmvc包中)		//核心控制器 固定类
					
					
			4.添加 spring配置文件:
				0.在springmvc.xml下配置，
				1.创建 springmvc.xml,	(即bean.xml)(在 resources目录下)
				2.约束同 spring, 多一个 mvc名称空间,
				3.按照 spring， IOC(基于注解/XML)方式配置。
					
				例：	<?xml version="1.0" encoding="UTF-8"?>
					<beans xmlns="http://www.springframework.org/schema/beans"
					       xmlns:mvc="http://www.springframework.org/schema/mvc"		
					       xmlns:context="http://www.springframework.org/schema/context"
					       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
					       xsi:schemaLocation="
					        http://www.springframework.org/schema/beans
					        http://www.springframework.org/schema/beans/spring-beans.xsd
					        http://www.springframework.org/schema/mvc
					        http://www.springframework.org/schema/mvc/spring-mvc.xsd
					        http://www.springframework.org/schema/context
					        http://www.springframework.org/schema/context/spring-context.xsd">
						<context:component-scan base-package="wxt"></context:component-scan>
					</beans>
				
			5.将项目部署到服务器：
				1.点击 Servers图标 ——> 空白处右键 ——> Add and Remove...
				2.添加项目即可
				
			
			(springMVC框架有一个默认的规则：IOC容器中 映射方法 有返回值表示发生跳转；
											返回的字符串，表示跳转到 视图解析器目录下 的JSP文件的名称)
												
			6.编写控制器 Controller类、注解加入IOC：
				1.创建 Controller类，
				2.创建 sayHello()方法，返回值String,返回"success"。
				3.在 /WEB-INF目录下创建 pages目录，pages目录中 创建success.jsp文件。
				4.在类上添加注解 @Controller，加入IOC,
				5.在方法上添加注解 @RequestMapping(path="/hello")，即可将请求映射到该方法。
				
				
			7.使 核心控制器 读取 springmvc.xml文件：
				1.在web.xml中配置.
				2.在 核心控制类 <servlet>标签中， 配置<init-param>标签：全局初始化参数。
					<param-name>:	contextConfigLocation			//给 核心控制器类的 contextConfigLocation属性 配置值
					<param-value>：	classpath:springmvc.xml			//配置值(classpath:配置文件路径)
					
				3.在 核心控制类 <servlet>标签中，配置<load-on-startup>标签：启动服务器就创建 核心控制器类对象。
					<load-on-startup>1</load-on-startup>
				
				
			8.配置视图解析器：	(跳转页面时，视图解析器会帮你跳转到指定的页面)
				1.在springmvc.xml中配置.
				2.在 <beans>标签中，配置 <bean>标签：			
					class="org.springframework.web.servlet.view.InternalResourceViewResolver"	//视图解析器 固定类
					
				3.在 <bean>中，配置 <property>标签：
					name="prefix"				//跳转文件所在的目录				
					value="/WEB-INF/pages/"		//目录
					
				4.在 <bean>中，配置 <property>标签：
					name="suffix"				//跳转文件的后缀名				
					value=".jsp"				//后缀名
					
			9.配置 <mvc:annotation-driven/>标签:		(开启 springMVC框架 注解的支持)
				1.在springmvc.xml中配置.
				2.在 <beans>标签中，配置 <mvc:annotation-driven/>标签：
					<mvc:annotation-driven/>	//开启 springMVC框架 注解支持
					
				3.此配置自动加载 RequestMappingHandlerMapping (处理映射器)和 RequestMappingHandlerAdapter (处理适配器) 
					
 */


/*								 SpringMVC 入门案例  报错---异常分析
 	
 	1. web.xml中配置出错。
 			异常信息：	NumberFormatException: For input string: ""
 						InvocationTargetException：
 			
 			错误配置：	在 核心控制类 <servlet>标签中，
 						配置为：<load-on-startup></load-on-startup>
 					
			正确配置：	配置为：<load-on-startup>1</load-on-startup>
			
			分析：		少写1。
			
	2. springmvc.xml中配置出错。
			异常信息：	CannotLoadBeanClassException：
						ClassNotFoundException：
	
			错误配置：	在配置视图解析器bean时，
						配置为：<bean id="internalResourceViewResolver" class="InternalResourceViewResolver">
	
			正确配置：	配置为：<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			
			分析：		少写类的包名。应写全限定类名。
 */


/*								 springMVC 的组件、RequestMapping注解
 * 
 	0. SpringMVC 的三大组件：处理器映射器、处理器适配器、视图解析器。
 
	1. DispatcherServlet：前端控制器
			用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由
		它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。

	2. HandlerMapping：处理器映射器
			HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的
		映射方式，例如：配置文件方式，实现接口方式，注解方式等。

	3. Handler：处理器
			它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由
		Handler 对具体的用户请求进行处理。

	4. HandlAdapter：处理器适配器
			通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理
		器进行执行。

	5. View Resolver：视图解析器
			iew Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名
		即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。
		
	6. View：视图
			SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView
		等。我们最常用的视图就是 jsp。
			一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开
		发具体的页面。

	7. <mvc:annotation-driven>说明
			使用 <mvc:annotation-driven> 自动加载 RequestMappingHandlerMapping （处理映射器） 和
		RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用
		<mvc:annotation-driven>替代注解处理器和适配器的配置。
			
			它就相当于在 xml 中配置了：
			<!-- 上面的标签相当于 如下配置-->
			
			<!-- HandlerMapping -->
			<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
			<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>
			
			<!-- HandlerAdapter -->
			<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>
			<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>
			<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>
			
			<!-- HadnlerExceptionResolvers -->
			<bean class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"></bean>
			<bean class="org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"></bean>
			<bean class="org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"></bean>


	8. 注解：@RequestMapping 
		
		1.使用说明
			源码：	@Target({ElementType.METHOD, ElementType.TYPE})		//该注解可于方法上、类上
					@Retention(RetentionPolicy.RUNTIME)
					@Documented
					@Mapping
					public @interface RequestMapping {
					}
					
			作用：	用于建立请求 URL 和处理请求方法之间的对应关系。
			
			出现位置：
					1.类上：
						请求 URL 的第一级访问目录。此处不写的话，就相当于应用的根目录。写的话需要以/开头。
						它出现的目的是为了使我们的 URL 可以按照模块化管理.
						
						例如：
							@Controller
							@RequestMapping(path="/account")
							public class HelloController {
							
							账户模块 URI：
								/account/add			( @RequestMapping 中写 path="/account")
								/account/update
								/account/delete
								...
							订单模块 URI：
								/order/add				( @RequestMapping 中写 path="/order")
								/order/update
								/order/delete

					2.方法上：
						请求 URL 的第二级访问目录。
			
						属性：
							value：用于指定请求的 URL。它和 path 属性的作用是一样的。
							method：用于指定请求的方式。RequestMethod.POST(GET、HEAD、PUT、PATCH、DELETE、OPTIONS、TRACE)
							params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的 key 和 value 必须和配置的一模一样。
							headers：用于指定限制请求消息头的条件。
						
						例如：
							@RequestMapping(value="/testRequestMapping",method={RequestMethod.POST})  //该方法请求方式需为POST
							public String testRequestMapping(){										  //超链接请求方式为GET
								...
								return "success";
							}
							
							params = {"accountName"}:	表示请求中 必须有请求参数，属性名为 accountName。
							params = {"accountName=heihei"}:	表示请求中 请求参数 accountName 的值必须为 heihei
							params = {"moeny!100"}:		表示请求参数中 money 不能是 100。
							headers = {"Accept"}:		表示请求头 中必须要包含 Accept请求头(值不用管)。
							
						注意：
						以上四个属性只要出现 2 个或以上时，他们的关系是与的关系。

 */
 

/*								 谷歌中(google)查看请求头、响应头(小技巧)
 
  	1. 浏览器中 按F12 打开调试工具，
  	2. 点击 Network 即可进入，
  	3. 开始发送请求，即可拦截请求头、响应头，
  	4. 下方 Headers 中就是请求头、响应头的参数。
  	
 */


/*								 请求参数的绑定、post请求中文时乱码、自定义类型转换器、获得原生的ServletAPI对象
 	1.何为请求参数的绑定
 		程序中得到 请求参数 即为 springMVC中请求参数的绑定。
 	
 	2.绑定案例：
 		1.基本类型、String
	 		请求参数:			username=hehe&password=123
	 		MVC框架：			sayHello(String username,String password){}
	 		规则：				定义方法的 传入参数中： 变量名 = 请求参数名 即可。
 		
 		2.Javabean类型
	 		请求参数:			username=hehe&password=123
	 		MVC框架：			sayHello(User user){}					//如果需要获取 请求参数，则在方法中 定义 传入参数
	 		规则：				1.请求参数名 = Javabean中的 成员变量名。
	 							2.传入参数是 Javabean类型。
 		
 		
 		3.Javabean关联对象(Javabean1中包含Javabean2)
	 		请求参数:			<form action="param/saveAccount" method="post">
							        姓名：<input type="text" name="username" /><br/>
							        密码：<input type="text" name="password" /><br/>
							        金额：<input type="text" name="money" /><br/>
							        用户姓名：<input type="text" name="user.uname" /><br/>
							        用户年龄：<input type="text" name="user.age" /><br/>
							    <input type="submit" value="提交" /></form>
							    
	 		MVC框架：			@RequestMapping(path="/param/saveAccount")
	 							sayHello(User user){}
	 							
	 		规则：				1.请求参数名 = Javabean中的 成员变量名。
 								2.请求参数名 写作： bean2.属性名	(account.uname)
 								
 										
 		4.Javabean类型(包含 List Map类型 属性)
 			请求参数:			<form action="param/saveAccount" method="post">
							        姓名：<input type="text" name="username" /><br/>
							        密码：<input type="text" name="password" /><br/>
							        金额：<input type="text" name="money" /><br/>
							
							        用户姓名：<input type="text" name="list[0].uname" /><br/>
							        用户年龄：<input type="text" name="list[0].age" /><br/>
							
							        用户姓名：<input type="text" name="map['one'].uname" /><br/>
							        用户年龄：<input type="text" name="map['one'].age" /><br/>
								<input type="submit" value="提交" /></form>
								
	 		MVC框架：			@RequestMapping(path="/param/saveAccount")
	 							sayHello(User user){}
	 		
	 		规则：				1. List中对象：请求参数名 写作： list[0].属性名	(list[0].uname)
	 							2. Map中对象：  请求参数名 写作： map['one'].属性名	(map['one'].uname)
 	
 	3.支持的数据类型：(方法中)  
		1. 基本数据类型和 String类型
		2. 实体类型（JavaBean）
		3. 集合数据类型（List、map集合等）

			
	4.使用要求：
		1.基本数据类型和字符串类型:
			1. 提交表单的name和参数的名称是相同的
			2. 区分大小写
		2. 实体类型（JavaBean）:
			1. 提交表单的name和JavaBean中的属性名称需要一致
			2. 如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成：对象.属性 例如：address.name
		3. 给集合属性数据封装:
			1. JSP页面编写方式：list[0].属性


   -----------------------------------------------------------------------------------------------------------	
	5.post请求下--参数为中文时 的乱码问题
		1.解决方案：配置一个 CharacterEncodingFilter 过滤器即可。（由 spring 提供）
		2.在 web.xml中配置。
		3.配置<filter>标签：
							<filter>
								<filter-name>characterEncodingFilter</filter-name>
								<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
								<init-param>
									<param-name>encoding</param-name>
									<param-value>UTF-8</param-value>
								</init-param>
							</filter>
							<filter-mapping>
								<filter-name>characterEncodingFilter</filter-name>
								<url-pattern>/*</url-pattern>
							</filter-mapping>
   -------------------------------------------------------------------------------------------------------------	
		
	6.自定义类型转换器
		1. 表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装，说明Spring框架内部会默认进行数据类型转换。
		2. 如果想自定义数据类型转换，可以实现Converter的接口：
			1. 自定义类型转换器，实现接口：
					public class StringToDateConverter implements Converter<String, Date>{

						public Date convert(String source) {
							if(source == null) {
								throw new RuntimeException("参数不能为空");
							}
							try {
								DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
								// 解析字符串
								Date date = df.parse(source);
								return date;
							} catch (Exception e) {
								throw new RuntimeException("类型转换错误");
							}
						}
					}
			2. 注册自定义类型转换器，在springmvc.xml配置文件中编写配置：
					<!-- 注册自定义类型转换器，原本转换器中，添加自定义类型转换器 -->
					<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
						<property name="converters">
							<set>
								<bean class="cn.itcast.utils.StringToDateConverter"/>		//添加自定义转换器
							</set>
						</property>
					</bean>
					<!-- 开启Spring对MVC注解的支持 加载自定义类型转换器 -->
					<mvc:annotation-driven conversion-service="conversionService"/>
	---------------------------------------------------------------------------------------------------------------
	
	7.在控制器中 使用原生的ServletAPI对象(request、response)
		1. 只需要在 控制器的方法参数 定义 HttpServletRequest和 HttpServletResponse对象.


 */


/*								 SpringMVC 常用注解、测试注解报错
 * 
	1. RequestParam注解
		1. 作用：把请求中 指定名称的参数 传递给控制器中的形参赋值。这样 请求参数名与方法参数名 就可以不一致了。
		2. 属性：
			1. value：请求参数中的名称
			2. required：请求参数中是否必须提供此参数，默认值是true，必须提供
		3. 代码如下：
					@RequestMapping(path="/hello")
					public String sayHello(@RequestParam(value="username",required=false)String name) {
						System.out.println(name);
						return "success";
					}
	
	2. RequestBody注解
		1. 作用：用于获取post请求方式 请求体的内容（注意：get请求方式不可以）
		2. 属性：
			1. required：是否必须有请求体，默认值是true
		3. 代码如下：
					@RequestMapping(path="/hello")
					public String sayHello(@RequestBody String body) {
						System.out.println(body);
						return "success";
					}

	3. PathVariable注解
		1. 作用：拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符
		2. 属性：
			1. value：指定url中的占位符名称
		3. Restful风格的URL：
			1. 请求路径一样，可以根据不同的请求方式去执行后台的不同方法
			2. restful风格的URL优点：
									1. 结构清晰
									2. 符合标准
									3. 易于理解
									4. 扩展方便
		4. 代码如下：
					@RequestMapping(path="/hello/{sid}")
					public String sayHello(@PathVariable(value="sid") String id) {
						System.out.println(id);
						return "success";
					}

	4. RequestHeader注解		（用处不大）
		1. 作用：获取指定请求头的值
		2. 属性:
			1. value：请求头的名称
		3. 代码如下:
					@RequestMapping(path="/hello")
					public String sayHello(@RequestHeader(value="Accept") String header) {
						System.out.println(header);
						return "success";
					}

	5. CookieValue注解
		1. 作用：获取请求中 指定cookie的名称的值
		2. 属性：
			1. value：cookie的名称
		3. 代码：
					@RequestMapping(path="/hello")
					public String sayHello(@CookieValue(value="JSESSIONID") String cookieValue) {
						System.out.println(cookieValue);
						return "success";
					}
	
	6. ModelAttribute注解
		1. 作用
			1. 出现在方法上：当前方法会在 控制器方法 执行前先执行。
			2. 出现在参数上：获取指定的数据给参数赋值。
		2. 应用场景：
			1. 当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。
		3. 具体的代码：
			1. 修饰的方法有返回值：(出现在方法1上(有返回值))
					@ModelAttribute	
					public User showUser(String name) {
						System.out.println("showUser执行了...");
						// 模拟从数据库中查询对象
						User user = new User();
						user.setName("哈哈");
						user.setPassword("123");
						user.setMoney(100d);
						return user;			//return后，将User对象传递给 下一个方法的形参
					}
					
					@RequestMapping(path="/updateUser")
					public String updateUser(User user) {	//User对象传递到此处,没有提交的字段使用User原来的数据
						System.out.println(user);
						return "success";
					}
			2. 修饰的方法没有返回值：(出现在方法1上(无返回值)、出现在方法2参数上)
					@ModelAttribute	
					public void showUser(String name,Map<String, User> map) {
						System.out.println("showUser执行了...");
						// 模拟从数据库中查询对象
						User user = new User();
						user.setName("哈哈");
						user.setPassword("123");
						user.setMoney(100d);
						map.put("abc", user);	//将User对象存入Map集合
					}
					
					@RequestMapping(path="/updateUser")
					public String updateUser(@ModelAttribute(value="abc") User user) {	  //从Map集合中取出User对象，给形参
						System.out.println(user);										  //没有提交的字段使用User原数据
						return "success";
					}

	7. SessionAttributes注解
		1. 作用：
			1.出现在类上：用于多次执行控制器方法间的参数共享，将Model集合中数据存入到session域对象中。
			2.Model接口(框架提供)：
				1.实现类 ModelMap、ExtendedModelMap。
				2.是 Map集合,存入该集合的数据会被存入request域中。
				3.想使用时，在方法参数上定义即可。
		2. 属性：
			1. value：指定存入属性的名称
		3. 代码如下：
					@Controller
					@RequestMapping(path="/anno")
					@SessionAttributes(value={"msg","age"})   //把 model中 msg=美美、age=18 存入到session域对中
					public class HelloController {					
					
						@RequestMapping(value="/testSessionAttributes")		// model中 存入key、value
					    public String testSessionAttributes(Model model){
					        // 底层会存储到request域对象中
					        model.addAttribute("msg","美美");
					        model.addAttribute("age",18);
					        return "success";
					    }
					
					    @RequestMapping(value="/getSessionAttributes")		// model中 取出key、value
					    public String getSessionAttributes(ModelMap modelMap){
					        String msg = (String) modelMap.get("msg");
					        String age = (String) modelMap.get("age");
					        System.out.println(msg + age);
					        return "success";
					    }
					
					    @RequestMapping(value="/delSessionAttributes")	//清除 session域中数据(model中还有数据)
					    public String delSessionAttributes(SessionStatus status,Model model){
					        status.setComplete();
					        System.out.println(model);
					        return "success";
					    }
					}
			
-------------------------------- 测试注解时报错，无法启动 tomcat服务器------------------------------------------
	解决方案：重新 remove、add项目，即可

 */


/*								2.响应数据和结果视图		(--见: Web20_SpringMVC_Day2)
 * 
	1.Controller方法 种类：(对应不同响应数据和结果视图)(默认跳转方式：请求转发)
	
		1.返回值：字符串。
			方法返回值 String，return指定视图的名称，跳转到 视图解析器下 指定名称的页面。
				例：		@RequestMapping(value="/hello")
						public String sayHello() {
							// 跳转到XX页面
							return "success";
						}
			
		2.返回值：void。无 return。
 			方法返回值 void，无 return，默认跳转到 视图解析器 "/con1"目录下 名为"2"的页面。
 												（根据 类映射    @RequestMapping(value="/con1")）
 												（根据 方法映射 @RequestMapping(value="/2")）
 			无"xx/con1/2.yy"的页面，则报404异常。
 			
 		3.返回值：void。有 return。
 			方法返回值 void，有 return，默认不发生跳转。
 			
 			1.需跳转：在方法中，使用请求转发或者重定向跳转到指定的页面。再加 return;
	 			例：		重定向：response.sendRedirect(request.getContextPath()+"/index.jsp");
	 					转发：request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);
 			2.不跳转：浏览器直接响应。
 				例:		response.setCharacterEncoding("UTF-8");
 						response.setContentType("text/html;charset=UTF-8");
 						response.getWriter().print("你好");
 						return;
 		
 		4.返回值：ModelAndView对象(可存储数据\跳转页面)
 			方法返回值 ModelAndView对象，可以向对象中存储数据(存到request域中)：	mv.addObject("users", users);
 									     也可以跳转页面(视图解析器下 同名页面)：	mv.setViewName("success");
			ModelAndView对象可以在方法中创建：
				例：		ModelAndView mv = new ModelAndView();
			
			
			
	2. SpringMVC框架提供的转发和重定向

		1.手动跳转：关键字 forward 请求转发
			方法返回值 String类型，return "forward:/xx/yy.jsp"(默认web应用目录下)
				例：		@RequestMapping(path="/5")	
						public String test5() {
							return "forward:/WEB-INF/pages/success.jsp";			//跳转到页面success.jsp
						}

		2.手动跳转：关键字 redirect 重定向
			方法返回值 String类型，return "redirect:/xx/yy.jsp"(默认web应用目录下/con1/下,框架内部封装了项目名/类映射名/)
				例：		@RequestMapping(path="/6")	
						public String test6() {
							return "redirect:4.jsp";			//跳转到页面4.jsp
						}
						
						
	3. @ResponseBody 向客户端响应 json数据(页面发送异步请求时，需要服务器返回一个json数据)
	
		1.webapp添加依赖包：	webapp/js 目录下，放入 jquery-2.2.4 依赖包。
		
		2.配置-不拦截静态资源： 
				原因：即使对服务器端JS、CSS的请求，核心控制器也会拦截 并查找处理器适配器，从而无法访问JS、CSS文件。
				1. springmvc.xml中配置。
				2. 添加<mvc:resources location="" mapping=""></mvc:resources>标签。
						location：该文件地址不拦截。	如：	location="/js/"
						mapping：该映射请求不拦截。	如：	mapping="/js/**"
				3.例：
						<mvc:resources location="/css/" mapping="/css/**"/> <!-- 样式 -->
						<mvc:resources location="/images/" mapping="/images/**"/> <!-- 图片 -->
						<mvc:resources location="/js/" mapping="/js/**"/> <!-- javascript -->
						
		3.页面: 编写JQ代码，发送ajax请求。
		
		4.处理器Controller：
				--- 获取json数据，转为bean对象。
				--- springmvc框架 支持将json转为bean。		(条件：json的key名  与 bean的属性名  相同)
				
				准备：
					0. 导包：							(mvc框架 json 转 bean 依赖包)
							1. jackson-databind
							2. jackson-core
							3. jackson-annotations
							
				1.得到json数据 对应的bean: 
							传入参数为：封入数据的 Bean		(后台自动将json数据 封装到 bean中)
							
				2.响应客户端 (向浏览器返回 json数据)：
							返回值为: Bean类型			(后台自动将bean对象 转为json 响应给客户端)
							返回值前加入注解：@ResponseBody
							
				3.例：	
						@RequestMapping(path="/testAjax")
						public @ResponseBody User testAjax(User user) {
							System.out.println(user);
							user.setName(user.getName()+"1");
							user.setAge(user.getAge()+1);
							return user;
						}
						
						
 */	

/*								 WEB-INF目录访问权限
 *
	1.WEB-INF目录下的文件，浏览器无法直接访。
		1.WEB-INF不作为Web应用的公共文档树的一部分。因此，WEB-INF 目录下的资源不是为客户直接服务的。
		2.WEB-INF下文件，请求转发(forward)可以访问，重定向(redirect)不可访问。
		3.WEB-INF下面的内容，服务器级别才能访问，客户端并不能访问。
			转发：	服务器级别。	(默认web应用下)	request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);
			重定向：	客户端级别。	(默认主机名下)	response.sendRedirect();
		3.如果需要直接访问，可以放在和WEB-INF同级目录下。 
 */

/*								 SpringMVC 实现文件上传								 
 * 
 	1.表单数据/文件上传 的必要前提：
 		A form 表单的 enctype 取值必须是：multipart/form-data	---请求体为 分界符划分/几个部分的描述
 			
 			默认值是：application/x-www-form-urlencoded		---请求体为 键值对形式
			enctype：是表单请求正文的类型。
			
		B method 属性取值必须是 Post。
		
			get方式：	1.请求数据会在 URL栏提交，
					 	2.IE的 URL长度限制是2083个字符，(2K+35) 
					 	3.提交数据类型：只允许ASCII码。
		
		C 提供一个文件选择域<input type="file" name="upload"/>
		
	2.文件上传的原理
		1.当 form 表单的 enctype 取值不是默认值后，request.getParameter()将失效。

		2.当 form 表单的 enctype 取值为 Multipart/form-data 时，请求正文内容就变成：
		   每一部分都是 MIME 类型描述的正文：
			-----------------------------7de1a433602ac 分界符
			Content-Disposition: form-data; name="userName" 协议头
			aaa 协议的正文
			-----------------------------7de1a433602ac
			Content-Disposition: form-data; name="file"; 
			filename="C:\Users\zhy\Desktop\fileupload_demofile\b.txt"
			Content-Type: text/plain 协议的类型（MIME 类型）
			bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
			-----------------------------7de1a433602ac--
	
	3.第三方组件实现文件上传
		1.使用 Commons-fileupload 组件实现文件上传。
		2. Commons-fileupload 组件可以解析 multipart类型的请求体。


	-------------------------------三种方式 处理文件上传--------------------------------------------------------
	注：
		三种方式都需导包：		1.Commons-fileupload		--解析requst 得到上传文件 的组件
		
		三种方式都需编写 JSP页面：
								<form action="/fileUpload" method="post" enctype="multipart/form-data">
									名称：<input type="text" name="picname"/><br/>
									图片：<input type="file" name="upload"/><br/>	//文件上传标签
									<input type="submit" value="上传"/>
								</form>

	
	1.传统方式 处理上传文件
		1.原理：	利用 Commons-fileupload 包中的 ServletFileUpload 对象解析 request，获得文件项。
		2.需要：	导Commons-fileupload包
		
		例：		// 使用fileupload组件完成文件上传
		        // 上传的位置
		        String path = request.getSession().getServletContext().getRealPath("/uploads/");
		        // 判断，该路径是否存在
		        File file = new File(path);
		        if(!file.exists()){
		            // 创建该文件夹
		            file.mkdirs();
		        }
		
		        // 解析request对象，获取上传文件项
		        DiskFileItemFactory factory = new DiskFileItemFactory();
		        ServletFileUpload upload = new ServletFileUpload(factory);
		        
		        // 解析request
		        List<FileItem> items = upload.parseRequest(request);
		        // 遍历
		        for(FileItem item:items){
		            // 进行判断，当前item对象是否是上传文件项
		            if(item.isFormField()){
		                // 说明普通表单向
		            }else{
		                // 说明上传文件项
		                // 获取上传文件的名称
		                String filename = item.getName();
		                // 把文件的名称设置唯一值，uuid
		                String uuid = UUID.randomUUID().toString().replace("-", "");
		                filename = uuid+"_"+filename;
		                // 完成文件上传
		                item.write(new File(path,filename));
		                // 删除临时文件
		                item.delete();
		            }
		        }
				return "success";
	
	
	2. springMVC方式 处理上传文件
		1.原理：	利用 MVC框架的 文件解析器，request ————> 前端控制器 ————> 文件解析器 ————> 得到upload对象
		2.需要：	1.导Commons-fileupload包
				2.在springmvc.xml中，配置文件解析器
				3.在Controller类，对应方法中，定义传入参数：MultipartFile upload(此处名称 与文件上传标签 name属性值名称 必须相同)
		
		例：		public String fileuoload2(HttpServletRequest request, MultipartFile upload) {
					// 使用fileupload组件完成文件上传
			        // 上传的位置
			        String path = request.getSession().getServletContext().getRealPath("/uploads/");
			        // 判断，该路径是否存在
			        File file = new File(path);
			        if(!file.exists()){
			            // 创建该文件夹
			            file.mkdirs();
			        }
			
			        // 说明上传文件项
			        // 获取上传文件的名称
			        String filename = upload.getOriginalFilename();
			        // 把文件的名称设置唯一值，uuid
			        String uuid = UUID.randomUUID().toString().replace("-", "");
			        filename = uuid+"_"+filename;
			        
			        // 完成文件上传
			        upload.transferTo(new File(path,filename));		//文件上传代码
			
			        return "success";
				}
 */

public class SpringMVC详解 {

}
